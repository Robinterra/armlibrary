namespace "ARM.Pi"
{
    using "System";
    using "System.IO";
    using "System.Gpio";
    using "System.Collections";
    using "System.Runtime";

    public class PiGpioService : IGpioService
    {

        // -----------------------------------------------

        private int piVariante;

        private int virtualAdressToGpio;

        // -----------------------------------------------

        #region ctor

        // -----------------------------------------------

        public this new ( int piVariante )
        {
            return this;
        }

        // -----------------------------------------------

        public this ~ (  )
        {

        }

        // -----------------------------------------------

        #endregion ctor

        // -----------------------------------------------

        #region methods

        // -----------------------------------------------

        public static int GetRegister(int pin)
        {
            return pin / 10 * 4;
        }

        // -----------------------------------------------

        public static int GetAmountShift(int pin)
        {
            int position = pin / 10 * 10;

            return position * 3;
        }

        // -----------------------------------------------

        public bool Setup()
        {
            int fileId = InputOutput.OpenFile("/dev/gpiomem");

            int piVariante = this.piVariante;

            int virtualAdressToGpio = InputOutput.Mmap2(fileId, piVariante);
            this.virtualAdressToGpio = virtualAdressToGpio;

            return true;
        }

        // -----------------------------------------------

        public bool InitPort ( int pin, int mode )
        {
            int adresse = this.virtualAdressToGpio + PiGpioService.GetRegister(pin);

            Pointer pointer = adresse as Pointer;
            int value = pointer.Value;

            int amountShift = PiGpioService.GetAmountShift(pin);

            int reset = 0x3 << amountShift;
            value = value | reset;
            value = value ^ reset;

            int newPinState = mode << amountShift;

            pointer.Value = value | newPinState;

            return true;
        }

        // -----------------------------------------------

        public bool SetPullUpPullDown ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool SetSpeed ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool SetOutputType ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool Read ( int pin )
        {
            int adresse = this.virtualAdressToGpio + 0x34;

            Pointer pointer = adresse as Pointer;
            int result = pointer.Value;

            return result >> pin;
        }

        // -----------------------------------------------

        public bool Write ( int pin, int value )
        {
            int adresse = this.virtualAdressToGpio;
            if (value) adresse = adresse + 0x1c;
            else adresse = adresse + 0x28;

            int setvalue = 1 << pin;

            Pointer pointer = adresse as Pointer;
            pointer.Value = setvalue;

            return true;
        }

        // -----------------------------------------------

        #endregion methods

        // -----------------------------------------------

    }

}