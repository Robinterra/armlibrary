namespace "ARM.Pi"
{
    using "System";
    using "System.IO";
    using "System.Gpio";
    using "System.Collections";
    using "System.Runtime";

    public class PiGpioService : IGpioService
    {

        // -----------------------------------------------

        private int piVariante;

        private int virtualAdressToGpio;

        private Array pinMap;

        // -----------------------------------------------

        #region ctor

        // -----------------------------------------------

        public this new ( int piVariante )
        {
            Array pinMap = Array.New[32];
            pinMap.Data[2] = new PiGpioPin(0, 6) as int;
            pinMap.Data[3] = new PiGpioPin(0, 9) as int;
            pinMap.Data[4] = new PiGpioPin(0, 12) as int;
            pinMap.Data[5] = new PiGpioPin(0, 15) as int;
            pinMap.Data[6] = new PiGpioPin(0, 18) as int;
            pinMap.Data[17] = new PiGpioPin(4, 21) as int;
            pinMap.Data[22] = new PiGpioPin(8, 6) as int;
            pinMap.Data[23] = new PiGpioPin(8, 9) as int;
            pinMap.Data[27] = new PiGpioPin(8, 21) as int;
            this.pinMap = pinMap;

            return this;
        }

        // -----------------------------------------------

        public this ~ (  )
        {

        }

        // -----------------------------------------------

        #endregion ctor

        // -----------------------------------------------

        #region methods

        // -----------------------------------------------

        public bool Setup()
        {
            int fileId = InputOutput.OpenFile("/dev/gpiomem");

            int piVariante = this.piVariante;

            int virtualAdressToGpio = InputOutput.Mmap2(fileId, piVariante);
            this.virtualAdressToGpio = virtualAdressToGpio;

            return true;
        }

        // -----------------------------------------------

        public bool InitPort ( int pin, int mode )
        {
            PiGpioPin pinInfo = this.pinMap.Data[pin] as PiGpioPin;

            int adresse = this.virtualAdressToGpio + pinInfo.Register;

            Pointer pointer = adresse as Pointer;
            int value = pointer.Value;

            int reset = 0x3 << pinInfo.AmountShift;
            value = value | reset;
            value = value ^ reset;

            int newPinState = mode << pinInfo.AmountShift;

            pointer.Value = value | newPinState;

            return true;
        }

        // -----------------------------------------------

        public bool SetPullUpPullDown ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool SetSpeed ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool SetOutputType ( int pin, int mode )
        {
            return false;
        }

        // -----------------------------------------------

        public bool Read ( int pin )
        {
            int adresse = this.virtualAdressToGpio + 0x34;

            Pointer pointer = adresse as Pointer;
            int result = pointer.Value;

            return result >> pin;
        }

        // -----------------------------------------------

        public bool Write ( int pin, int value )
        {
            int adresse = this.virtualAdressToGpio;
            if (value) adresse = adresse + 0x1c;
            else adresse = adresse + 0x28;

            int setvalue = 1 << pin;

            Pointer pointer = adresse as Pointer;
            pointer.Value = setvalue;

            return true;
        }

        // -----------------------------------------------

        #endregion methods

        // -----------------------------------------------

    }

}