namespace "ARM.CortexM"
{
    using "System";

    public primitive class ResetAndClockControl
    {

        // -----------------------------------------------

        #region vars

        // -----------------------------------------------

        public int CR;//ClockControlRegister
        public int PLLCFGR;//PLLConfigurationRegister
        public int CFGR;//ClockConfigurationRegister
        public int CIR;//ClockInterruptRegister
        public int AHB1RSTR;//AHB1PeripheralResetRegister
        public int AHB2RSTR;//AHB2PeripheralResetRegister
        public int AHB3RSTR;//AHB2PeripheralResetRegister
        public int AHB4RSTR;//AHB2PeripheralResetRegister
        public int APB1RSTR;//APB1PeripheralResetRegister
        public int APB2RSTR;//APB2PeripheralResetRegister
        public int APB3RSTR;//APB1PeripheralResetRegister
        public int APB4RSTR;//APB2PeripheralResetRegister
        public int AHB1ENR;//AHB1PeripheralClockEnableRegister
        public int AHB2ENR;//AHB2PeripheralClockEnableRegister
        public int AHB3ENR;//AHB1PeripheralClockEnableRegister
        public int AHB4ENR;//AHB2PeripheralClockEnableRegister
        public int APB1ENR;//APB1PeripheralClockEnableRegister
        public int APB2ENR;//APB2PeripheralClockEnableRegister
        public int APB3ENR;//APB1PeripheralClockEnableRegister
        public int APB4ENR;//APB2PeripheralClockEnableRegister

        // -----------------------------------------------

        #endregion vars

        // -----------------------------------------------

        #region methods

        // -----------------------------------------------

        public bool EnableAdc1()
        {
            this.APB2ENR = this.APB2ENR | #defalgo IORegister,EnableAdc1:;
        }

        // -----------------------------------------------

        public bool EnableGpioPorts ( int value )
        {
            this.AHB1ENR = this.AHB1ENR | value;
        }

        // -----------------------------------------------

        private int AHBPrescTable (  )
        {
            int tmp = this.CFGR & 0xF0;

            tmp = tmp >> 4;

            if ( tmp < 8) return 0;

            tmp = tmp - 7;

            return tmp;
        }

        // -----------------------------------------------

        private int PLLTickRate (  )
        {
            int pllsource = this.PLLCFGR & 0x400000;
            pllsource = pllsource >> 22;

            int pllm = this.PLLCFGR & 0x3F;

            if (pllsource != 0) { pllsource = 0x17D7840; }
            else { pllsource = 0xF42400; }

            int pllvco = pllsource / pllm;

            int plln = this.PLLCFGR & 0x7FC0;
            plln = plln >> 6;

            pllvco = pllvco * plln;

            int pllp = this.PLLCFGR & 0x30000;
            pllp = pllp >> 15;
            pllp = pllp + 2;

            return pllvco / pllp;
        }

        // -----------------------------------------------

        public int TicksPerSecond (  )
        {
            int tmp = this.CFGR & 0xC;

            int res = 0xF42400; //Value of the Internal oscillator in Hz

            if (tmp == 0x4) { res = 0x17D7840; }//Default value of the External oscillator in Hz
            if (tmp == 0x8) { res = this.PLLTickRate (  ); }//PLL used as system clock source

            tmp = this.AHBPrescTable (  );

            return res >> tmp;
        }

        // -----------------------------------------------

        public int WaitInMiliSeconds(int miliSecond)
        {
            int wert = 1000 / miliSecond;
            //if (microSecond > wert) { microSecond = 1000000; }
            //int waitTeiler = wert / microSecond;
            int secondTick = this.TicksPerSecond();
            secondTick = secondTick >> 4;
            secondTick = secondTick / wert;
            secondTick = secondTick + 126 * miliSecond;

            while (secondTick = secondTick - 1)
            {

            }
        }

        // -----------------------------------------------

        // -----------------------------------------------

        public int WaitInMicroSeconds(int microSecond)
        {
            int waitTeiler = 200000 / microSecond;
            int secondTick = this.TicksPerSecond();
            secondTick = secondTick / 5;
            secondTick = secondTick / waitTeiler;

            while (secondTick = secondTick - 1)
            {

            }
        }

        // -----------------------------------------------

        #endregion methods

        // -----------------------------------------------

    }
}
